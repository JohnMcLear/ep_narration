(function (k, m) {
  if (m.addEventListener) {
    var n = Array.prototype; var o = Object.prototype; const v = n.forEach; const w = n.slice; const t = o.hasOwnProperty; const x = o.toString; const C = k.Popcorn; let r = []; let y = !1; const z = {}; const u = {}; let s; const A = k.requestAnimationFrame || k.webkitRequestAnimationFrame || k.mozRequestAnimationFrame || k.oRequestAnimationFrame || k.msRequestAnimationFrame || function (a) { k.setTimeout(a, 16); }; var c = function (a, b) { return new c.p.init(a, b || null); }; c.version = '@VERSION'; c.isSupported = !0; c.instances = []; c.p = c.prototype = {init(a, b) {
      let e; const d = this; if ('function' ===
typeof a) { if ('complete' === m.readyState) { a(m, c); } else if (r.push(a), !y) { y = !0; var f = function () { m.removeEventListener('DOMContentLoaded', f, !1); for (let a = 0, b = r.length; a < b; a++)r[a].call(m, c); r = null; }; m.addEventListener('DOMContentLoaded', f, !1); } } else {
        if ('string' === typeof a) try { e = m.querySelector(a); } catch (g) { throw Error(`Popcorn.js Error: Invalid media element selector: ${a}`); } this.media = e || a; e = this.media.nodeName && this.media.nodeName.toLowerCase() || 'video'; this[e] = this.media; this.options = b || {}; this.id = this.options.id ||
c.guid(e); if (c.byId(this.id)) throw Error(`Popcorn.js Error: Cannot use duplicate ID (${this.id})`); this.isDestroyed = !1; this.data = {running: {cue: []}, timeUpdate: c.nop, disabled: {}, events: {}, hooks: {}, history: [], state: {volume: this.media.volume}, trackRefs: {}, trackEvents: {byStart: [{start: -1, end: -1}], byEnd: [{start: -1, end: -1}], animating: [], startIndex: 0, endIndex: 0, previousUpdateTime: -1}}; c.instances.push(this); var h = function () {
          0 > d.media.currentTime && (d.media.currentTime = 0); d.media.removeEventListener('loadeddata',
              h, !1); let a, b, e, f, g; a = d.media.duration; a = a != a ? Number.MAX_VALUE : a + 1; c.addTrackEvent(d, {start: a, end: a}); d.options.frameAnimation ? (d.data.timeUpdate = function () { c.timeUpdate(d, {}); c.forEach(c.manifest, (a, c) => { if (b = d.data.running[c]) { f = b.length; for (let h = 0; h < f; h++) { e = b[h]; (g = e._natives) && g.frame && g.frame.call(d, {}, e, d.currentTime()); } } }); d.emit('timeupdate'); !d.isDestroyed && A(d.data.timeUpdate); }, !d.isDestroyed && A(d.data.timeUpdate)) : (d.data.timeUpdate = function (a) { c.timeUpdate(d, a); }, d.isDestroyed ||
d.media.addEventListener('timeupdate', d.data.timeUpdate, !1));
        }; Object.defineProperty(this, 'error', {get() { return d.media.error; }}); 2 <= d.media.readyState ? h() : d.media.addEventListener('loadeddata', h, !1); return this;
      }
    }}; c.p.init.prototype = c.p; c.byId = function (a) { for (let b = c.instances, e = b.length, d = 0; d < e; d++) if (b[d].id === a) return b[d]; return null; }; c.forEach = function (a, b, c) {
      if (!a || !b) return {}; var c = c || this; let d; let f; if (v && a.forEach === v) return a.forEach(b, c); if ('[object NodeList]' === x.call(a)) {
        d = 0; for (f = a.length; d <
f; d++)b.call(c, a[d], d, a); return a;
      } for (d in a)t.call(a, d) && b.call(c, a[d], d, a); return a;
    }; c.extend = function (a) { const b = a; const e = w.call(arguments, 1); c.forEach(e, (a) => { for (const c in a)b[c] = a[c]; }); return b; }; c.extend(c, {noConflict(a) { a && (k.Popcorn = C); return c; }, error(a) { throw Error(a); }, guid(a) { c.guid.counter++; return (a ? a : '') + (+new Date() + c.guid.counter); }, sizeOf(a) { let b = 0; let c; for (c in a)b++; return b; }, isArray: Array.isArray || function (a) { return '[object Array]' === x.call(a); }, nop() {},
      position(a) { var a = a.getBoundingClientRect(); const b = {}; let e = m.documentElement; const d = m.body; let f; let g; let h; f = e.clientTop || d.clientTop || 0; g = e.clientLeft || d.clientLeft || 0; h = k.pageYOffset && e.scrollTop || d.scrollTop; e = k.pageXOffset && e.scrollLeft || d.scrollLeft; f = Math.ceil(a.top + h - f); g = Math.ceil(a.left + e - g); for (const p in a)b[p] = Math.round(a[p]); return c.extend({}, b, {top: f, left: g}); }, disable(a, b) {
        if (!a.data.disabled[b]) {
          a.data.disabled[b] = !0; for (var c = a.data.running[b].length - 1, d; 0 <= c; c--) {
            d = a.data.running[b][c],
            d._natives.end.call(a, null, d);
          }
        } return a;
      }, enable(a, b) { if (a.data.disabled[b]) { a.data.disabled[b] = !1; for (var c = a.data.running[b].length - 1, d; 0 <= c; c--)d = a.data.running[b][c], d._natives.start.call(a, null, d); } return a; }, destroy(a) {
        const b = a.data.events; const e = a.data.trackEvents; let d; let f; let g; let h; for (f in b) { d = b[f]; for (g in d) delete d[g]; b[f] = null; } for (h in c.registryByName)c.removePlugin(a, h); e.byStart.length = 0; e.byEnd.length = 0; a.isDestroyed || (a.data.timeUpdate && a.media.removeEventListener('timeupdate', a.data.timeUpdate,
            !1), a.isDestroyed = !0);
      }}); c.guid.counter = 1; c.extend(c.p, function () {
      const a = {}; c.forEach('load play pause currentTime playbackRate volume duration preload playbackRate autoplay loop controls muted buffered readyState seeking paused played seekable ended'.split(/\s+/g), (b) => {
        a[b] = function (a) {
          let d; return 'function' === typeof this.media[b] ? (null != a && /play|pause/.test(b) && (this.media.currentTime = c.util.toSeconds(a)), this.media[b](), this) : null != a ? (d = this.media[b], this.media[b] = a, d !== a && this.emit('attrchange',
              {attribute: b, previousValue: d, currentValue: a}), this) : this.media[b];
        };
      }); return a;
    }()); c.forEach(['enable', 'disable'], (a) => { c.p[a] = function (b) { return c[a](this, b); }; }); c.extend(c.p, {roundTime() { return Math.round(this.media.currentTime); }, exec(a, b, e) {
      const d = arguments.length; let f; let g; try { g = c.util.toSeconds(a); } catch (h) {}'number' === typeof g && (a = g); if ('number' === typeof a && 2 === d) { e = b, b = a, a = c.guid('cue'); } else if (1 === d) { b = -1; } else if (f = this.getTrackEvent(a)) {
        if ('string' === typeof a && 2 === d && ('number' ===
typeof b && (e = f._natives.start), 'function' === typeof b))e = b, b = f.start;
      } else if (2 <= d) { if ('string' === typeof b) { try { g = c.util.toSeconds(b); } catch (p) {}b = g; }'number' === typeof b && (e = c.nop()); 'function' === typeof b && (e = b, b = -1); }c.addTrackEvent(this, {id: a, start: b, end: b + 1, _running: !1, _natives: {start: e || c.nop, end: c.nop, type: 'cue'}}); return this;
    }, mute(a) {
      a = null == a || !0 === a ? 'muted' : 'unmuted'; 'unmuted' === a && (this.media.muted = !1, this.media.volume = this.data.state.volume); 'muted' === a && (this.data.state.volume = this.media.volume,
      this.media.muted = !0); this.emit(a); return this;
    }, unmute(a) { return this.mute(null == a ? !1 : !a); }, position() { return c.position(this.media); }, toggle(a) { return c[this.data.disabled[a] ? 'enable' : 'disable'](this, a); }, defaults(a, b) { if (c.isArray(a)) return c.forEach(a, function (a) { for (const b in a) this.defaults(b, a[b]); }, this), this; this.options.defaults || (this.options.defaults = {}); this.options.defaults[a] || (this.options.defaults[a] = {}); c.extend(this.options.defaults[a], b); return this; }});
    c.Events = {UIEvents: 'blur focus focusin focusout load resize scroll unload', MouseEvents: 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave click dblclick', Events: 'loadstart progress suspend emptied stalled play pause error loadedmetadata loadeddata waiting playing canplay canplaythrough seeking seeked timeupdate ended ratechange durationchange volumechange'}; c.Events.Natives = `${c.Events.UIEvents} ${c.Events.MouseEvents} ${c.Events.Events}`; s = ['UIEvents', 'MouseEvents', 'Events']; for (var B =
c.Events, n = B.Natives.split(/\s+/g), o = 0, D = n.length; o < D; o++)z[n[o]] = !0; s.forEach((a) => { u[a] = {}; for (let b = B[a].split(/\s+/g), c = b.length, d = 0; d < c; d++)u[a][b[d]] = !0; }); c.events = {isNative(a) { return !!z[a]; }, getInterface(a) { if (!c.events.isNative(a)) return !1; for (var b = 0, e = s.length, d, f; b < e; b++) if (f = s[b], u[f][a]) { d = f; break; } return d; }, all: c.Events.Natives.split(/\s+/g), fn: {trigger(a, b) {
      let e; if (this.data.events[a] && c.sizeOf(this.data.events[a])) {
        if (e = c.events.getInterface(a)) {
          return e =
m.createEvent(e), e.initEvent(a, !0, !0, k, 1), this.media.dispatchEvent(e), this;
        } c.forEach(this.data.events[a], function (a) { a.call(this, b); }, this);
      } return this;
    }, listen(a, b) {
      const e = this; let d = !0; const f = c.events.hooks[a]; let g; this.data.events[a] || (this.data.events[a] = {}, d = !1); if (f && (f.add && f.add.call(this, {}, b), f.bind && (a = f.bind), f.handler && (g = b, b = function (a) { f.handler.call(e, a, g); }), d = !0, !this.data.events[a])) this.data.events[a] = {}, d = !1; this.data.events[a][b.name || b.toString() + c.guid()] = b; !d && -1 < c.events.all.indexOf(a) &&
this.media.addEventListener(a, (b) => { c.forEach(e.data.events[a], (a) => { typeof a === 'function' && a.call(e, b); }); }, !1); return this;
    }, unlisten(a, b) { if (this.data.events[a] && this.data.events[a][b]) return delete this.data.events[a][b], this; this.data.events[a] = null; return this; }}, hooks: {canplayall: {bind: 'canplaythrough', add(a, b) { let c = !1; this.media.readyState && (b.call(this, a), c = !0); this.data.hooks.canplayall = {fired: c}; }, handler(a, b) {
      this.data.hooks.canplayall.fired || (b.call(this,
          a), this.data.hooks.canplayall.fired = !0);
    }}}}; c.forEach([['trigger', 'emit'], ['listen', 'on'], ['unlisten', 'off']], (a) => { c.p[a[0]] = c.p[a[1]] = c.events.fn[a[0]]; }); c.addTrackEvent = function (a, b) {
      let e, d; b.id && (e = a.getTrackEvent(b.id)); e && (d = !0, b = c.extend({}, e, b), a.removeTrackEvent(b.id)); b && (b._natives && b._natives.type && a.options.defaults && a.options.defaults[b._natives.type]) && (b = c.extend({}, a.options.defaults[b._natives.type], b)); b._natives && (b._id = b.id || b._id || c.guid(b._natives.type), a.data.history.push(b._id));
      b.start = c.util.toSeconds(b.start, a.options.framerate); b.end = c.util.toSeconds(b.end, a.options.framerate); let f = a.data.trackEvents.byStart; const g = a.data.trackEvents.byEnd; let h; for (h = f.length - 1; 0 <= h; h--) if (b.start >= f[h].start) { f.splice(h + 1, 0, b); break; } for (f = g.length - 1; 0 <= f; f--) if (b.end > g[f].end) { g.splice(f + 1, 0, b); break; }b.end > a.media.currentTime && b.start <= a.media.currentTime && (b._running = !0, a.data.running[b._natives.type].push(b), a.data.disabled[b._natives.type] || b._natives.start.call(a, null, b)); h <= a.data.trackEvents.startIndex &&
b.start <= a.data.trackEvents.previousUpdateTime && a.data.trackEvents.startIndex++; f <= a.data.trackEvents.endIndex && b.end < a.data.trackEvents.previousUpdateTime && a.data.trackEvents.endIndex++; this.timeUpdate(a, null, !0); b._id && c.addTrackEvent.ref(a, b); d && (d = 'cue' === b._natives.type ? 'cuechange' : 'trackchange', a.emit(d, {id: b.id, previousValue: {time: e.start, fn: e._natives.start}, currentValue: {time: b.start, fn: b._natives.start}}));
    }; c.addTrackEvent.ref = function (a, b) { a.data.trackRefs[b._id] = b; return a; }; c.removeTrackEvent =
function (a, b) {
  for (var e, d, f = a.data.history.length, g = a.data.trackEvents.byStart.length, h = 0, p = 0, m = [], q = [], j = [], l = []; -1 < --g;)e = a.data.trackEvents.byStart[h], d = a.data.trackEvents.byEnd[h], e._id || (m.push(e), q.push(d)), e._id && (e._id !== b && m.push(e), d._id !== b && q.push(d), e._id === b && (p = h, e._natives._teardown && e._natives._teardown.call(a, e))), h++; g = a.data.trackEvents.animating.length; h = 0; if (g) for (;-1 < --g;)e = a.data.trackEvents.animating[h], e._id || j.push(e), e._id && e._id !== b && j.push(e), h++; p <= a.data.trackEvents.startIndex &&
a.data.trackEvents.startIndex--; p <= a.data.trackEvents.endIndex && a.data.trackEvents.endIndex--; a.data.trackEvents.byStart = m; a.data.trackEvents.byEnd = q; a.data.trackEvents.animating = j; for (g = 0; g < f; g++)a.data.history[g] !== b && l.push(a.data.history[g]); a.data.history = l; c.removeTrackEvent.ref(a, b);
}; c.removeTrackEvent.ref = function (a, b) { delete a.data.trackRefs[b]; return a; }; c.getTrackEvents = function (a) { for (var b = [], a = a.data.trackEvents.byStart, c = a.length, d = 0, f; d < c; d++)f = a[d], f._id && b.push(f); return b; }; c.getTrackEvents.ref =
function (a) { return a.data.trackRefs; }; c.getTrackEvent = function (a, b) { return a.data.trackRefs[b]; }; c.getTrackEvent.ref = function (a, b) { return a.data.trackRefs[b]; }; c.getLastTrackEventId = function (a) { return a.data.history[a.data.history.length - 1]; }; c.timeUpdate = function (a, b) {
      const e = a.media.currentTime; let d = a.data.trackEvents.previousUpdateTime; const f = a.data.trackEvents; let g = f.endIndex; let h = f.startIndex; const p = f.byStart.length; const m = f.byEnd.length; const q = c.registryByName; let j; let l; let i; if (d <= e) {
        for (;f.byEnd[g] && f.byEnd[g].end <= e;) {
          if (j = f.byEnd[g],
          l = (d = j._natives) && d.type, !d || q[l] || a[l]) { !0 === j._running && (j._running = !1, i = a.data.running[l], i.splice(i.indexOf(j), 1), a.data.disabled[l] || (d.end.call(a, b, j), a.emit('trackend', c.extend({}, j, {plugin: l, type: 'trackend'})))), g++; } else { c.removeTrackEvent(a, j._id); return; }
        } for (;f.byStart[h] && f.byStart[h].start <= e;) {
          if (j = f.byStart[h], l = (d = j._natives) && d.type, !d || q[l] || a[l]) {
            j.end > e && !1 === j._running && (j._running = !0, a.data.running[l].push(j), a.data.disabled[l] || (d.start.call(a, b, j), a.emit('trackstart', c.extend({},
                j, {plugin: l, type: 'trackstart'})))), h++;
          } else { c.removeTrackEvent(a, j._id); return; }
        }
      } else if (d > e) {
        for (;f.byStart[h] && f.byStart[h].start > e;) if (j = f.byStart[h], l = (d = j._natives) && d.type, !d || q[l] || a[l]) { !0 === j._running && (j._running = !1, i = a.data.running[l], i.splice(i.indexOf(j), 1), a.data.disabled[l] || (d.end.call(a, b, j), a.emit('trackend', c.extend({}, j, {plugin: l, type: 'trackend'})))), h--; } else { c.removeTrackEvent(a, j._id); return; } for (;f.byEnd[g] && f.byEnd[g].end > e;) {
          if (j = f.byEnd[g], l = (d = j._natives) && d.type, !d || q[l] ||
a[l]) { j.start <= e && !1 === j._running && (j._running = !0, a.data.running[l].push(j), a.data.disabled[l] || (d.start.call(a, b, j), a.emit('trackstart', c.extend({}, j, {plugin: l, type: 'trackstart'})))), g--; } else { c.removeTrackEvent(a, j._id); return; }
        }
      }f.endIndex = g; f.startIndex = h; f.previousUpdateTime = e; f.byStart.length < p && f.startIndex--; f.byEnd.length < m && f.endIndex--;
    }; c.extend(c.p, {getTrackEvents() { return c.getTrackEvents.call(null, this); }, getTrackEvent(a) { return c.getTrackEvent.call(null, this, a); }, getLastTrackEventId() {
      return c.getLastTrackEventId.call(null,
          this);
    }, removeTrackEvent(a) { c.removeTrackEvent.call(null, this, a); return this; }, removePlugin(a) { c.removePlugin.call(null, this, a); return this; }, timeUpdate(a) { c.timeUpdate.call(null, this, a); return this; }, destroy() { c.destroy.call(null, this); return this; }}); c.manifest = {}; c.registry = []; c.registryByName = {}; c.plugin = function (a, b, e) {
      if (0 <= c.protect.natives.indexOf(a.toLowerCase())) { c.error(`'${a}' is a protected function name`); } else {
        const d = ['start', 'end']; const f = {}; const g = 'function' ===
typeof b; const h = ['_setup', '_teardown', 'start', 'end', 'frame']; const m = function (a, b) { a = a || c.nop; b = b || c.nop; return function () { a.apply(this, arguments); b.apply(this, arguments); }; }; c.manifest[a] = e = e || b.manifest || {}; h.forEach((d) => { const e = b[d] || c.nop; b[d] = function () { if (c.plugin.debug) return e.apply(this, arguments); try { return e.apply(this, arguments); } catch (b) { c.plugin.errors.push({plugin: a, thrown: b, source: e.toString()}), this.emit('pluginerror', c.plugin.errors); } }; }); c.p[a] = f[a] = function (f, j) {
          let l, i; if (f && !j) {
            j = f, f =
null;
          } else { if (l = this.getTrackEvent(f)) return j = c.extend({}, l, j), c.addTrackEvent(this, j), this; j.id = f; } this.data.running[a] = this.data.running[a] || []; i = c.extend({}, this.options.defaults && this.options.defaults[a] || {}, j); l = g ? b.call(this, i) : b; if (i) {
            if (i.ranges && c.isArray(i.ranges)) { c.forEach(i.ranges, function (b) { b = c.extend({}, i, b); delete b.ranges; this[a](b); }, this); } else {
              const k = i._natives = {}; let n = ''; let o; c.extend(k, l); i._natives.type = a; i._running = !1; k.start = k.start || k.in; k.end = k.end || k.out; i.once && (k.end = m(k.end,
                  function () { this.removeTrackEvent(i._id); })); k._teardown = m(function () { const a = w.call(arguments); const b = this.data.running[k.type]; a.unshift(null); a[1]._running && b.splice(b.indexOf(i), 1) && k.end.apply(this, a); }, k._teardown); i.compose = i.compose && i.compose.split(' ') || []; i.effect = i.effect && i.effect.split(' ') || []; i.compose = i.compose.concat(i.effect); i.compose.forEach((a) => { n = c.compositions[a] || {}; h.forEach((a) => { k[a] = m(k[a], n[a]); }); }); i._natives.manifest = e; 'start' in i || (i.start = i.in || 0); !i.end && 0 !==
i.end && (i.end = i.out || Number.MAX_VALUE); t.call(i, 'toString') || (i.toString = function () { const b = [`start: ${i.start}`, `end: ${i.end}`, `id: ${i.id || i._id}`]; i.target != null && b.push(`target: ${i.target}`); return `${a} ( ${b.join(', ')} )`; }); i.target || (o = 'options' in e && e.options, i.target = o && 'target' in o && o.target); i._natives && (i._id = c.guid(i._natives.type)); i._natives._setup && i._natives._setup.call(this, i); c.addTrackEvent(this, i); c.forEach(l, function (a, b) { if (b !== 'type' && d.indexOf(b) === -1) this.on(b, a); }, this);
            }
          } return this;
        };
        e && c.extend(b, {manifest: e}); const k = {fn: f[a], definition: b, base: b, parents: [], name: a}; c.registry.push(c.extend(f, k, {type: a})); c.registryByName[a] = k; return f;
      }
    }; c.plugin.errors = []; c.plugin.debug = '@VERSION' === c.version; c.removePlugin = function (a, b) {
      if (!b) {
        b = a; a = c.p; if (0 <= c.protect.natives.indexOf(b.toLowerCase())) { c.error(`'${b}' is a protected function name`); return; } var e = c.registry.length; var d; for (d = 0; d < e; d++) {
          if (c.registry[d].name === b) {
            c.registry.splice(d, 1); delete c.registryByName[b]; delete c.manifest[b];
            delete a[b]; return;
          }
        }
      }e = a.data.trackEvents.byStart; d = a.data.trackEvents.byEnd; const f = a.data.trackEvents.animating; let g; let h; g = 0; for (h = e.length; g < h; g++)e[g] && (e[g]._natives && e[g]._natives.type === b) && (e[g]._natives._teardown && e[g]._natives._teardown.call(a, e[g]), e.splice(g, 1), g--, h--, a.data.trackEvents.startIndex <= g && (a.data.trackEvents.startIndex--, a.data.trackEvents.endIndex--)), d[g] && (d[g]._natives && d[g]._natives.type === b) && d.splice(g, 1); g = 0; for (h = f.length; g < h; g++) {
        f[g] && (f[g]._natives && f[g]._natives.type ===
b) && (f.splice(g, 1), g--, h--);
      }
    }; c.compositions = {}; c.compose = function (a, b, e) { c.manifest[a] = e || b.manifest || {}; c.compositions[a] = b; }; c.plugin.effect = c.effect = c.compose; const E = /^(?:\.|#|\[)/; c.dom = {debug: !1, find(a, b) { let e = null; var a = a.trim(); var b = b || m; if (a) { if (!E.test(a) && (e = m.getElementById(a), null !== e)) return e; try { e = b.querySelector(a); } catch (d) { if (c.dom.debug) throw Error(d); } } return e; }}; const F = /\?/; const G = {url: '', data: '', dataType: '', success: c.nop, type: 'GET', async: !0, xhr() { return new k.XMLHttpRequest(); }};
    c.xhr = function (a) { a.dataType = a.dataType && a.dataType.toLowerCase() || null; if (a.dataType && ('jsonp' === a.dataType || 'script' === a.dataType))c.xhr.getJSONP(a.url, a.success, 'script' === a.dataType); else if (a = c.extend({}, G, a), a.ajax = a.xhr(), a.ajax) return 'GET' === a.type && a.data && (a.url += (F.test(a.url) ? '&' : '?') + a.data, a.data = null), a.ajax.open(a.type, a.url, a.async), a.ajax.send(a.data || null), c.xhr.httpData(a); }; c.xhr.httpData = function (a) {
      let b; let c = null; let d; let f = null; a.ajax.onreadystatechange = function () {
        if (4 === a.ajax.readyState) {
          try {
            c =
JSON.parse(a.ajax.responseText);
          } catch (g) {}b = {xml: a.ajax.responseXML, text: a.ajax.responseText, json: c}; if (!b.xml || !b.xml.documentElement) { b.xml = null; try { d = new DOMParser(), f = d.parseFromString(a.ajax.responseText, 'text/xml'), f.getElementsByTagName('parsererror').length || (b.xml = f); } catch (h) {} }a.dataType && (b = b[a.dataType]); a.success.call(a.ajax, b);
        }
      }; return b;
    }; c.xhr.getJSONP = function (a, b, e) {
      const d = m.head || m.getElementsByTagName('head')[0] || m.documentElement; const f = m.createElement('script'); let g = !1; var h = []; var h = /(=)\?(?=&|$)|\?\?/;
      let k; let n; e || (n = a.match(/(callback=[^&]*)/), null !== n && n.length ? (h = n[1].split('=')[1], '?' === h && (h = 'jsonp'), k = c.guid(h), a = a.replace(/(callback=[^&]*)/, `callback=${k}`)) : (k = c.guid('jsonp'), h.test(a) && (a = a.replace(h, `$1${k}`)), h = a.split(/\?(.+)?/), a = `${h[0]}?`, h[1] && (a += `${h[1]}&`), a += `callback=${k}`), window[k] = function (a) { b && b(a); g = true; }); f.addEventListener('load', () => { e && b && b(); g && delete window[k]; d.removeChild(f); }, !1); f.src = a; d.insertBefore(f, d.firstChild);
    }; c.getJSONP = c.xhr.getJSONP; c.getScript = c.xhr.getScript =
function (a, b) { return c.xhr.getJSONP(a, b, !0); }; c.util = {toSeconds(a, b) {
      let e = /^([0-9]+:){0,2}[0-9]+([.;][0-9]+)?$/; let d; let f; let g; if ('number' === typeof a) return a; 'string' === typeof a && !e.test(a) && c.error('Invalid time format'); e = a.split(':'); d = e.length - 1; f = e[d]; -1 < f.indexOf(';') && (f = f.split(';'), g = 0, b && 'number' === typeof b && (g = parseFloat(f[1], 10) / b), e[d] = parseInt(f[0], 10) + g); d = e[0]; return {1: parseFloat(d, 10), 2: 60 * parseInt(d, 10) + parseFloat(e[1], 10), 3: 3600 * parseInt(d, 10) + 60 * parseInt(e[1], 10) + parseFloat(e[2],
          10)}[e.length || 1];
    }}; c.p.cue = c.p.exec; c.protect = {natives: (Object.keys ? Object.keys(c.p) : function (a) { let b; const c = []; for (b in a)t.call(a, b) && c.push(b); return c; }(c.p)).map((a) => a.toLowerCase())}; c.forEach({listen: 'on', unlisten: 'off', trigger: 'emit', exec: 'cue'}, (a, b) => { const e = c.p[b]; c.p[b] = function () { 'undefined' !== typeof console && console.warn && (console.warn(`Deprecated method '${b}', ${null == a ? 'do not use.' : `use '${a}' instead.`}`), c.p[b] = e); return c.p[a].apply(this, [].slice.call(arguments)); }; });
    k.Popcorn = c;
  } else { k.Popcorn = {isSupported: !1}; for (n = 'byId forEach extend effects error guid sizeOf isArray nop position disable enable destroyaddTrackEvent removeTrackEvent getTrackEvents getTrackEvent getLastTrackEventId timeUpdate plugin removePlugin compose effect xhr getJSONP getScript'.split(/\s+/); n.length;)k.Popcorn[n.shift()] = function () {}; }
})(window, window.document);
