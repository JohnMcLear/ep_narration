(function (d) {
  const u = /^.*\.(ogg|oga|aac|mp3|wav)($|\?)/; const v = /^.*\.(ogg|oga|aac|mp3|wav|ogg|ogv|mp4|webm)($|\?)/; d.player = function (c, b) {
    if (!d[c]) {
      var b = b || {}; const f = function (c, f, e) {
        var e = e || {}; let h = new Date() / 1E3; let l = h; let k = 0; let s = 0; let o = 1; let p = !1; const j = {}; const g = 'string' === typeof c ? d.dom.find(c) : c; let a = {}; Object.prototype.__defineGetter__ || (a = g || document.createElement('div')); for (const i in g) {
          i in a || ('object' === typeof g[i] ? a[i] = g[i] : 'function' === typeof g[i] ? a[i] = function (a) {
            return 'length' in g[a] && !g[a].call ? g[a] : function () {
              return g[a].apply(g,
                  arguments);
            };
          }(i) : d.player.defineProperty(a, i, {get: function (a) { return function () { return g[a]; }; }(i), set: d.nop, configurable: !0}));
        } var t = function () { h = new Date() / 1E3; a.paused || (a.currentTime += h - l, a.dispatchEvent('timeupdate'), setTimeout(t, 10)); l = h; }; a.play = function () { this.paused = !1; 4 <= a.readyState && (l = new Date() / 1E3, a.dispatchEvent('play'), t()); }; a.pause = function () { this.paused = !0; a.dispatchEvent('pause'); }; d.player.defineProperty(a, 'currentTime', {get() { return k; }, set(b) {
          k = +b; a.dispatchEvent('timeupdate');
          return k;
        }, configurable: !0}); d.player.defineProperty(a, 'volume', {get() { return o; }, set(b) { o = +b; a.dispatchEvent('volumechange'); return o; }, configurable: !0}); d.player.defineProperty(a, 'muted', {get() { return p; }, set(b) { p = +b; a.dispatchEvent('volumechange'); return p; }, configurable: !0}); d.player.defineProperty(a, 'readyState', {get() { return s; }, set(a) { return s = a; }, configurable: !0}); a.addEventListener = function (a, b) { j[a] || (j[a] = []); j[a].push(b); return b; }; a.removeEventListener =
function (a, b) { let c; const d = j[a]; if (d) { for (c = j[a].length - 1; 0 <= c; c--)b === d[c] && d.splice(c, 1); return b; } }; a.dispatchEvent = function (a) { let b; let c = a.type; if (!c && (c = a, a = d.events.getInterface(c)))b = document.createEvent(a), b.initEvent(c, !0, !0, window, 1); if (j[c]) for (a = j[c].length - 1; 0 <= a; a--)j[c][a].call(this, b, this); }; a.src = f || ''; a.duration = 0; a.paused = !0; a.ended = 0; e && e.events && d.forEach(e.events, (b, c) => { a.addEventListener(c, b, !1); }); !1 !== b._canPlayType(g.nodeName, f) ? b._setup ? b._setup.call(a, e) : (a.readyState = 4, a.dispatchEvent('loadedmetadata'),
        a.dispatchEvent('loadeddata'), a.dispatchEvent('canplaythrough')) : setTimeout(() => { a.dispatchEvent('error'); }, 0); c = new d.p.init(a, e); if (b._teardown) { var q = c.destroy; var r = function () { b._teardown.call(a, e); }; var q = q || d.nop; var r = r || d.nop; c.destroy = function () { q.apply(this, arguments); r.apply(this, arguments); }; } return c;
      }; f.canPlayType = b._canPlayType = b._canPlayType || d.nop; d[c] = d.player.registry[c] = f;
    }
  }; d.player.registry = {}; d.player.defineProperty = Object.defineProperty || function (c, b, f) {
    c.__defineGetter__(b, f.get || d.nop);
    c.__defineSetter__(b, f.set || d.nop);
  }; d.player.playerQueue = function () { const c = []; let b = !1; return {next() { b = !1; c.shift(); c[0] && c[0](); }, add(d) { c.push(() => { b = !0; d && d(); }); !b && c[0](); }}; }; d.smart = function (c, b, f) {
    const m = ['AUDIO', 'VIDEO']; let n; let e = d.dom.find(c); let h; n = document.createElement('video'); const l = {ogg: 'video/ogg', ogv: 'video/ogg', oga: 'audio/ogg', webm: 'video/webm', mp4: 'video/mp4', mp3: 'audio/mp3'}; if (e) {
      if (-1 < m.indexOf(e.nodeName) && !b) return 'object' === typeof b && (f = b), d(e, f); 'string' === typeof b &&
(b = [b]); c = 0; for (srcLength = b.length; c < srcLength; c++) { h = v.exec(b[c]); h = !h || !h[1] ? !1 : n.canPlayType(l[h[1]]); if (h) { b = b[c]; break; } for (const k in d.player.registry) if (d.player.registry.hasOwnProperty(k) && d.player.registry[k].canPlayType(e.nodeName, b[c])) return d[k](e, b[c], f); }-1 === m.indexOf(e.nodeName) && (n = 'string' === typeof b ? b : b.length ? b[0] : b, c = document.createElement(u.exec(n) ? m[0] : m[1]), c.controls = !0, e.appendChild(c), e = c); f && f.events && f.events.error && e.addEventListener('error', f.events.error, !1); e.src = b;
      return d(e, f);
    }d.error(`Specified target ${c} was not found.`);
  };
})(Popcorn);
